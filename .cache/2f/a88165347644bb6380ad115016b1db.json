{"id":"index.js","dependencies":[{"name":"C:\\Users\\Araketsu\\Desktop\\RxJs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"rxjs","loc":{"line":15,"column":49,"index":734},"parent":"C:\\Users\\Araketsu\\Desktop\\RxJs\\src\\index.js","resolved":"C:\\Users\\Araketsu\\Desktop\\RxJs\\node_modules\\rxjs\\dist\\esm5\\index.js"},{"name":"rxjs/ajax","loc":{"line":16,"column":21,"index":764},"parent":"C:\\Users\\Araketsu\\Desktop\\RxJs\\src\\index.js","resolved":"C:\\Users\\Araketsu\\Desktop\\RxJs\\node_modules\\rxjs\\dist\\esm5\\ajax\\index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\nvar _ajax = require(\"rxjs/ajax\");\n//----------------------------------------------------------------------------------------------------------//\n// exhaustMap Operator //              Do not run if 1 observble already running.\n// ___________________________________________\n// Example on Marble Diagram:                 \\   \n// exhaustMap(() => interval(1000))             \\       \n// Input-----(-)-------(-)------------------->  \\      \n// Intervall-----------Ignored------>             \\      \n// Intervall-(0)--(1)--(0)--(1)--->               \\                   \n// Output----(0)--(1)--(0)--(1)----->              \\                 \n// _________________________________________________\\          \n\nvar button = document.querySelector('#btn');\nvar observable = (0, _rxjs.fromEvent)(button, 'click').pipe((0, _rxjs.exhaustMap)(function () {\n  // Will wait first request completed and then run new one.\n  return _ajax.ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe((0, _rxjs.take)(5), (0, _rxjs.tap)({\n    complete: function complete() {\n      console.log('inner observable has been completed');\n    }\n  }));\n}));\nvar subscription = observable.subscribe({\n  next: function next(value) {\n    console.log(value);\n  },\n  complete: function complete() {\n    console.log('completed');\n  }\n});\nconsole.log('hello');\n//----------------------------------------------------------------------------------------------------------//\n\n// //----------------------------------------------------------------------------------------------------------//\n// // concatMap Operator //           Works like switchMap but it allows only 1 observable to be run at the same time. But instead of stopping prev observable, it put a new 1 in the queue\n// // ___________________________________________\n// // Example on Marble Diagram:                 \\   \n// // concatMap(() => interval(1000))             \\        In this scenario first observable will run forever.\n// // Input-----(-)-------(-)------------------->  \\      \n// // Intervall-----------Queued------>             \\      \n// // Intervall-(0)--(1)--(0)--(1)--->               \\                   \n// // Output----(0)--(1)--(0)--(1)----->              \\                 \n// // _________________________________________________\\          \n\n// import { fromEvent, switchMap, interval, take, tap, concatMap } from \"rxjs\";\n// import { ajax } from 'rxjs/ajax';\n\n// const button = document.querySelector('#btn')\n// const observable = fromEvent(\n//   button, 'click'\n// ).pipe(\n//   concatMap(() => {                       // Will wait first request completed and then run new one.\n//     return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\n//       take(5),\n//       tap({\n//         complete() {\n//           console.log('inner observable has been completed')\n//         }\n//       })\n//     )\n//   }),\n//   // take(5)\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n// //----------------------------------------------------------------------------------------------------------//\n\n// //----------------------------------------------------------------------------------------------------------//\n// // switchMap Operator //               Will stop running already running observable and run new 1 \n// // ___________________________________________\n// // Example on Marble Diagram:                 \\   \n// // switchMap(() => interval(1000))             \\        \n// // Input-----(-)-------(-)------------------->  \\      \n// // Intervall-----------(0)--(1)------>           \\      \n// // Intervall-(0)--(1)|------->                    \\                   \n// // Output----(0)--(1)--(0)--(1)----->              \\                 \n// // _________________________________________________\\          \n\n// import { fromEvent, switchMap, interval, take, tap } from \"rxjs\";\n// import { ajax } from 'rxjs/ajax';\n\n// const button = document.querySelector('#btn')\n// const observable = fromEvent(\n//   button, 'click'\n// ).pipe(\n//   switchMap(() => {\n//     return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\n//       take(5),\n//       tap({\n//         complete() {\n//           console.log('inner observable has been completed')\n//         }\n//       })\n//     )\n//   }),\n//   // take(5)\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n// //----------------------------------------------------------------------------------------------------------//\n\n// //----------------------------------------------------------------------------------------------------------//\n// // mergeMap Operator //     \n// // ___________________________________________\n// // Example on Marble Diagram:                 \\   \n// // mergeMap(() => interval(1000))              \\        \n// // Input-----(-)------->                        \\      \n// // Intervall-(1)--(2)--(3)--(4)--(5)------->     \\                   \n// // Output----(1)--(2)--(3)--(4)--(5)------->      \\                 \n// // ________________________________________________\\          \n\n// import { fromEvent, mergeMap, interval, take, tap } from \"rxjs\";\n// import { ajax } from 'rxjs/ajax';\n\n// const button = document.querySelector('#btn')\n// const observable = fromEvent(\n//   button, 'click'\n// ).pipe(\n//   mergeMap(() => {\n//     return interval(1000).pipe(\n//       tap(console.log)\n//     )\n//   }),\n//   take(5)\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n// //----------------------------------------------------------------------------------------------------------//\n\n// //----------------------------------------------------------------------------------------------------------//\n// // Flattening Operators //               \n\n// import { fromEvent, map } from \"rxjs\";\n// import { ajax } from 'rxjs/ajax';\n// // ajax is for initiating https requests \n\n// const button = document.querySelector('#btn')\n// const observable = fromEvent(\n//   button, 'click'\n//   // document.querySelector('#btn'), 'click'\n// ).pipe(\n//   map(() => {\n//     return ajax.getJSON(\n//       'https://jsonplaceholder.typicode.com/todos/1'\n//     )\n//   })\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {                                   \n//     value.subscribe(console.log)                  // We will recive response of the second obsevble \n//   },\n//   // next(value) {\n//   //   console.log(value)\n//   // },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n// //----------------------------------------------------------------------------------------------------------//\n\n//----------------------------------------------------------------------------------------------------------//\n// Tap Operator //                Used to be used for debugging\n// ___________________________________________\n// Example on Marble Diagram:                 \\   \n// tap(console.log)                            \\        \n// Input--(1)--(2)--(3)--(4)--(5)------->       \\                        \n// Output-(1)--(2)--(3)--(4)--(5)------->       \\                 \n// _______________________________________________\\\n// import { interval, reduce, take, tap } from \"rxjs\";\n\n// const observable = interval(500).pipe(\n//   take(5),\n//   // tap(console.log),                         // Will show every step of compiling reducer. Good for debuging.\n//   tap({\n//     next(val) {\n//       console.log(val)\n//     }\n//   }), \n//   reduce(\n//     (acc, val) => acc + val,\n//     0\n//   )\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n//----------------------------------------------------------------------------------------------------------//\n\n//----------------------------------------------------------------------------------------------------------//\n// Take Operator //\n// ___________________________________________\n// Example on Marble Diagram:                 \\   \n// take(5)                                     \\        \n// Input--(1)--(2)--(3)--(4)--(5)--(6)-->       \\                        \n// Output-(1)--(2)--(3)--(4)--(5)|------->       \\                 \n// _______________________________________________\\\n// import { interval, reduce, take, scan } from \"rxjs\";\n\n// const observable = interval(500).pipe(\n//   take(5),\n//   scan(\n//     (acc, val) => acc + val,\n//     0\n//   )\n//   // reduce(\n//   //   (acc, val) => acc + val,\n//   //   0\n//   // )\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n//----------------------------------------------------------------------------------------------------------//\n\n//----------------------------------------------------------------------------------------------------------//\n// Reduce Operator //\n// _________________________________________\n// Example on Marble Diagram:              \\   \n// reduce(                                  \\\n//   (acc, value) => acc + value,            \\\n//   0                                        \\\n// )                                           \\        \n// Input---(1)--(2)--(3)---->                   \\                        \n// Output------------(6)-->                      \\                 \n// _______________________________________________\\\n// import { of, reduce } from \"rxjs\";\n\n// const observable = of(1,2,3,4,5).pipe(\n//   reduce(\n//     (acc, val) => acc + val,\n//     0\n//   )\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n//----------------------------------------------------------------------------------------------------------//\n\n//----------------------------------------------------------------------------------------------------------//\n// Filter Operator //\n// ____________________________________________\n// Example on Marble Diagram:                 \\   \n// filter(value => value > 3)                  \\        \n// Input---(1)--(2)--(3)--(4)--(5)-->           \\                        \n// Output-----------------(4)--(5)-->            \\                 \n// _______________________________________________\\\n// import { map, fromEvent, filter } from \"rxjs\";\n\n// const observable = fromEvent(\n//   document, 'keydown'\n// ).pipe(\n//   map(event => {\n//     event.code === 'Space' ? event.code : null     // Shorter version.\n//   })\n//   // map(event => event.code),\n//   // filter(code => code === 'Space')  // Will allow only space to be consoled.\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n//----------------------------------------------------------------------------------------------------------//\n\n//----------------------------------------------------------------------------------------------------------//\n// FromEvent Operator //\n\n// import { map, fromEvent } from \"rxjs\";\n\n// const observable = fromEvent(\n//   document, 'keydown'\n// ).pipe(\n//   map(event => event.code)\n// )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n//----------------------------------------------------------------------------------------------------------//\n\n// PLuck Operator //\n// ____________________________________________\n// Example on Marble Diagram:                  \\           \n// Input---({v:1})--({v:2})--({v:3})-->         \\                        \n// Output--(1)--(2)--(3)-->                      \\                 \n// ________________________________________________\n//----------------------------------------------------------------------------------------------------------//\n\n// Pipeable Operators //\n// They are functions for transforming, filtering, and combining data. \n// --------------------------------------------------------\n// New Solutuin:                                           \\\n// observable.pipe (                                       \\\n//   firstOperator(config),                                 \\\n//   secondOperator(confug)                                  \\\n// ).subscribe()                                                          \\\n// -------------------------------------------------------------\n// Old Solution:                                                 \\       \n// const observble = new Observable()                            \\\n// const operatorFunc = firstOperator(config)                     \\   \n// const newObservble = operatorFunc(observable)                   \\             \n// const operatorFuncTwo = secondOperator(config)                   \\             \n// const newObservbleTwo = operatorFuncTwo(newObservable)            \\     \n//----------------------------------------------------------------------------------------------------------//\n\n// import { of, map } from \"rxjs\";\n\n// const observable = of(1,2,3,4,5).pipe(\n//   map((value) => `$${value}`)\n// )\n\n// // const observable = of(1,2,3,4,5)\n// // const numbersWithSymbols = observable.pipe(\n// //   map((value) => `$${value}`)\n// // )\n\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n//----------------------------------------------------------------------------------------------------------//\n\n// From will loop throw the array and give us -> // 1 // 2 // 3 // 4 // 5 // completed // hello //\n// It even can loop throw string. const observable = from('alex')   ->    // a // l // e // x // completed // hello //\n// In case of 'from(fetch('https://jsonplaceholder.typicode.com/todos/1'))' we will get response back. // hello // {promise object} // complete //\n//----------------------------------------------------------------------------------------------------------//\n\n// import { from } from \"rxjs\";\n// const observable = from(fetch('https://jsonplaceholder.typicode.com/todos/1'))\n// // const observable = from('alex')\n// // const observable = from([1,2,3,4,5])\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n\n// Of will give us -> // 1 // 2 // 3 // 4 // 5 // completed // hello //\n// If we put inside of OF an array it will not loop throw array and just give us -> // [1,2,3,4,5] // completed // hello //\n//----------------------------------------------------------------------------------------------------------//\n\n// import { of } from \"rxjs\";\n// const observable = of(1,2,3,4,5)\n// const subscription = observable.subscribe({\n//   next(value) {\n//     console.log(value)\n//   },\n//   complete() {\n//     console.log('completed')\n//   }\n// })\n// console.log('hello')\n\n// FromEvent have 2 parametrs. Here we are listening for document and 'click' event. As well we need to insubscribe to avoid memory leak.\n//----------------------------------------------------------------------------------------------------------//\n\n// import { fromEvent } from \"rxjs\";\n// const observable = fromEvent(\n//   document, 'click'\n// )\n// const subscription = observable.subscribe(\n//   console.log\n// )\n\n// Timer will run from 0 to 1000 \n//----------------------------------------------------------------------------------------------------------//\n\n// import { timer } from \"rxjs\";\n// const observable = timer(0, 1000)\n// const subscription = observable.subscribe(\n//   console.log\n// )\n\n// Interval will run for ever with interval of 1000\n//----------------------------------------------------------------------------------------------------------//\n\n// import { interval } from \"rxjs\";\n// const observable = interval(1000)\n// const subscription = observable.subscribe(\n//   console.log\n// )\n\n//----------------------------------------------------------------------------------------------------------//\n\n// import { Observable } from \"rxjs\";\n// const observable = new Observable((subscriber) => {\n//   const id = setInterval(() => {\n//     subscriber.next('test')\n//     console.log('leak')\n//   }, 1000)\n//   // subscriber.complete()            // Without this observble will run for ever \n//   return () => {\n//     clearInterval(id)\n//   }\n//   // subscriber.next('Hello world')                   // Runs II //\n//   // subscriber.error('Error!')            // After Error rest of the code do not run \n//   // subscriber.next('test')\n//   // subscriber.complete()                 // After Complete rest of the code do not run       \n//   // subscriber.next('next')\n// })\n\n// // console.log('before')                              // Runs I //\n\n// const subscription = observable.subscribe({\n//   next: (value) => {\n//     console.log(`Received ${value}`)\n//   },\n//   complete: () => {\n//     console.log(\"Completed\")\n//   },\n//   error: (err) => {\n//     console.log(err)\n//   }\n// })\n\n// setTimeout(() => {\n//   subscription.unsubscribe()\n// }, 4000)\n\n// // console.log('after')                               // Runs III //"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":15,"column":0}},{"generated":{"line":3,"column":4},"source":"index.js","original":{"line":15,"column":0},"name":"_rxjs"},{"generated":{"line":3,"column":9},"source":"index.js","original":{"line":15,"column":0}},{"generated":{"line":3,"column":12},"source":"index.js","original":{"line":15,"column":0},"name":"require"},{"generated":{"line":3,"column":19},"source":"index.js","original":{"line":15,"column":0}},{"generated":{"line":4,"column":0},"source":"index.js","original":{"line":16,"column":0}},{"generated":{"line":4,"column":4},"source":"index.js","original":{"line":16,"column":0},"name":"_ajax"},{"generated":{"line":4,"column":9},"source":"index.js","original":{"line":16,"column":0}},{"generated":{"line":4,"column":12},"source":"index.js","original":{"line":16,"column":0},"name":"require"},{"generated":{"line":4,"column":19},"source":"index.js","original":{"line":16,"column":0}},{"generated":{"line":5,"column":0},"source":"index.js","original":{"line":4,"column":0}},{"generated":{"line":6,"column":0},"source":"index.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":0},"source":"index.js","original":{"line":6,"column":0}},{"generated":{"line":8,"column":0},"source":"index.js","original":{"line":7,"column":0}},{"generated":{"line":9,"column":0},"source":"index.js","original":{"line":8,"column":0}},{"generated":{"line":10,"column":0},"source":"index.js","original":{"line":9,"column":0}},{"generated":{"line":11,"column":0},"source":"index.js","original":{"line":10,"column":0}},{"generated":{"line":12,"column":0},"source":"index.js","original":{"line":11,"column":0}},{"generated":{"line":13,"column":0},"source":"index.js","original":{"line":12,"column":0}},{"generated":{"line":14,"column":0},"source":"index.js","original":{"line":13,"column":0}},{"generated":{"line":16,"column":0},"source":"index.js","original":{"line":18,"column":0}},{"generated":{"line":16,"column":4},"source":"index.js","original":{"line":18,"column":6},"name":"button"},{"generated":{"line":16,"column":10},"source":"index.js","original":{"line":18,"column":12}},{"generated":{"line":16,"column":13},"source":"index.js","original":{"line":18,"column":15},"name":"document"},{"generated":{"line":16,"column":21},"source":"index.js","original":{"line":18,"column":23}},{"generated":{"line":16,"column":22},"source":"index.js","original":{"line":18,"column":24},"name":"querySelector"},{"generated":{"line":16,"column":35},"source":"index.js","original":{"line":18,"column":37}},{"generated":{"line":16,"column":36},"source":"index.js","original":{"line":18,"column":38}},{"generated":{"line":16,"column":42},"source":"index.js","original":{"line":18,"column":44}},{"generated":{"line":16,"column":43},"source":"index.js","original":{"line":18,"column":45}},{"generated":{"line":17,"column":0},"source":"index.js","original":{"line":19,"column":0}},{"generated":{"line":17,"column":4},"source":"index.js","original":{"line":19,"column":6},"name":"observable"},{"generated":{"line":17,"column":14},"source":"index.js","original":{"line":19,"column":16}},{"generated":{"line":17,"column":17},"source":"index.js","original":{"line":19,"column":19}},{"generated":{"line":17,"column":21},"source":"index.js","original":{"line":19,"column":19},"name":"fromEvent"},{"generated":{"line":17,"column":36},"source":"index.js","original":{"line":19,"column":28}},{"generated":{"line":17,"column":38},"source":"index.js","original":{"line":20,"column":2},"name":"button"},{"generated":{"line":17,"column":44},"source":"index.js","original":{"line":20,"column":8}},{"generated":{"line":17,"column":46},"source":"index.js","original":{"line":20,"column":10}},{"generated":{"line":17,"column":53},"source":"index.js","original":{"line":21,"column":0}},{"generated":{"line":17,"column":54},"source":"index.js","original":{"line":21,"column":1}},{"generated":{"line":17,"column":55},"source":"index.js","original":{"line":21,"column":2},"name":"pipe"},{"generated":{"line":17,"column":59},"source":"index.js","original":{"line":21,"column":6}},{"generated":{"line":17,"column":60},"source":"index.js","original":{"line":22,"column":2}},{"generated":{"line":17,"column":64},"source":"index.js","original":{"line":22,"column":2},"name":"exhaustMap"},{"generated":{"line":17,"column":80},"source":"index.js","original":{"line":22,"column":12}},{"generated":{"line":17,"column":82},"source":"index.js","original":{"line":22,"column":13}},{"generated":{"line":17,"column":94},"source":"index.js","original":{"line":22,"column":19}},{"generated":{"line":18,"column":2},"source":"index.js","original":{"line":22,"column":43}},{"generated":{"line":19,"column":2},"source":"index.js","original":{"line":23,"column":4}},{"generated":{"line":19,"column":9},"source":"index.js","original":{"line":23,"column":11},"name":"ajax"},{"generated":{"line":19,"column":19},"source":"index.js","original":{"line":23,"column":15}},{"generated":{"line":19,"column":20},"source":"index.js","original":{"line":23,"column":16},"name":"getJSON"},{"generated":{"line":19,"column":27},"source":"index.js","original":{"line":23,"column":23}},{"generated":{"line":19,"column":28},"source":"index.js","original":{"line":23,"column":24}},{"generated":{"line":19,"column":74},"source":"index.js","original":{"line":23,"column":70}},{"generated":{"line":19,"column":75},"source":"index.js","original":{"line":23,"column":71}},{"generated":{"line":19,"column":76},"source":"index.js","original":{"line":23,"column":72},"name":"pipe"},{"generated":{"line":19,"column":80},"source":"index.js","original":{"line":23,"column":76}},{"generated":{"line":19,"column":81},"source":"index.js","original":{"line":24,"column":6}},{"generated":{"line":19,"column":85},"source":"index.js","original":{"line":24,"column":6},"name":"take"},{"generated":{"line":19,"column":95},"source":"index.js","original":{"line":24,"column":10}},{"generated":{"line":19,"column":97},"source":"index.js","original":{"line":24,"column":11}},{"generated":{"line":19,"column":98},"source":"index.js","original":{"line":24,"column":12}},{"generated":{"line":19,"column":99},"source":"index.js","original":{"line":24,"column":13}},{"generated":{"line":19,"column":101},"source":"index.js","original":{"line":25,"column":6}},{"generated":{"line":19,"column":105},"source":"index.js","original":{"line":25,"column":6},"name":"tap"},{"generated":{"line":19,"column":114},"source":"index.js","original":{"line":25,"column":9}},{"generated":{"line":19,"column":116},"source":"index.js","original":{"line":25,"column":10}},{"generated":{"line":20,"column":4},"source":"index.js","original":{"line":26,"column":8},"name":"complete"},{"generated":{"line":20,"column":12},"source":"index.js","original":{"line":26,"column":16}},{"generated":{"line":20,"column":23},"source":"index.js","original":{"line":26,"column":16},"name":"complete"},{"generated":{"line":20,"column":32},"source":"index.js","original":{"line":26,"column":16}},{"generated":{"line":20,"column":34},"source":"index.js","original":{"line":26,"column":19}},{"generated":{"line":21,"column":6},"source":"index.js","original":{"line":27,"column":10},"name":"console"},{"generated":{"line":21,"column":13},"source":"index.js","original":{"line":27,"column":17}},{"generated":{"line":21,"column":14},"source":"index.js","original":{"line":27,"column":18},"name":"log"},{"generated":{"line":21,"column":17},"source":"index.js","original":{"line":27,"column":21}},{"generated":{"line":21,"column":18},"source":"index.js","original":{"line":27,"column":22}},{"generated":{"line":21,"column":55},"source":"index.js","original":{"line":27,"column":59}},{"generated":{"line":21,"column":56},"source":"index.js","original":{"line":27,"column":60}},{"generated":{"line":22,"column":4},"source":"index.js","original":{"line":28,"column":8}},{"generated":{"line":23,"column":2},"source":"index.js","original":{"line":29,"column":6}},{"generated":{"line":23,"column":3},"source":"index.js","original":{"line":29,"column":7}},{"generated":{"line":23,"column":4},"source":"index.js","original":{"line":30,"column":4}},{"generated":{"line":23,"column":5},"source":"index.js","original":{"line":30,"column":5}},{"generated":{"line":24,"column":0},"source":"index.js","original":{"line":31,"column":2}},{"generated":{"line":24,"column":1},"source":"index.js","original":{"line":31,"column":3}},{"generated":{"line":24,"column":2},"source":"index.js","original":{"line":32,"column":0}},{"generated":{"line":24,"column":3},"source":"index.js","original":{"line":32,"column":1}},{"generated":{"line":25,"column":0},"source":"index.js","original":{"line":34,"column":0}},{"generated":{"line":25,"column":4},"source":"index.js","original":{"line":34,"column":6},"name":"subscription"},{"generated":{"line":25,"column":16},"source":"index.js","original":{"line":34,"column":18}},{"generated":{"line":25,"column":19},"source":"index.js","original":{"line":34,"column":21},"name":"observable"},{"generated":{"line":25,"column":29},"source":"index.js","original":{"line":34,"column":31}},{"generated":{"line":25,"column":30},"source":"index.js","original":{"line":34,"column":32},"name":"subscribe"},{"generated":{"line":25,"column":39},"source":"index.js","original":{"line":34,"column":41}},{"generated":{"line":25,"column":40},"source":"index.js","original":{"line":34,"column":42}},{"generated":{"line":26,"column":2},"source":"index.js","original":{"line":35,"column":2},"name":"next"},{"generated":{"line":26,"column":6},"source":"index.js","original":{"line":35,"column":6}},{"generated":{"line":26,"column":17},"source":"index.js","original":{"line":35,"column":6},"name":"next"},{"generated":{"line":26,"column":22},"source":"index.js","original":{"line":35,"column":7},"name":"value"},{"generated":{"line":26,"column":27},"source":"index.js","original":{"line":35,"column":12}},{"generated":{"line":26,"column":29},"source":"index.js","original":{"line":35,"column":14}},{"generated":{"line":27,"column":4},"source":"index.js","original":{"line":36,"column":4},"name":"console"},{"generated":{"line":27,"column":11},"source":"index.js","original":{"line":36,"column":11}},{"generated":{"line":27,"column":12},"source":"index.js","original":{"line":36,"column":12},"name":"log"},{"generated":{"line":27,"column":15},"source":"index.js","original":{"line":36,"column":15}},{"generated":{"line":27,"column":16},"source":"index.js","original":{"line":36,"column":16},"name":"value"},{"generated":{"line":27,"column":21},"source":"index.js","original":{"line":36,"column":21}},{"generated":{"line":27,"column":22},"source":"index.js","original":{"line":36,"column":22}},{"generated":{"line":28,"column":2},"source":"index.js","original":{"line":37,"column":2}},{"generated":{"line":28,"column":3},"source":"index.js","original":{"line":37,"column":3}},{"generated":{"line":29,"column":2},"source":"index.js","original":{"line":38,"column":2},"name":"complete"},{"generated":{"line":29,"column":10},"source":"index.js","original":{"line":38,"column":10}},{"generated":{"line":29,"column":21},"source":"index.js","original":{"line":38,"column":10},"name":"complete"},{"generated":{"line":29,"column":30},"source":"index.js","original":{"line":38,"column":10}},{"generated":{"line":29,"column":32},"source":"index.js","original":{"line":38,"column":13}},{"generated":{"line":30,"column":4},"source":"index.js","original":{"line":39,"column":4},"name":"console"},{"generated":{"line":30,"column":11},"source":"index.js","original":{"line":39,"column":11}},{"generated":{"line":30,"column":12},"source":"index.js","original":{"line":39,"column":12},"name":"log"},{"generated":{"line":30,"column":15},"source":"index.js","original":{"line":39,"column":15}},{"generated":{"line":30,"column":16},"source":"index.js","original":{"line":39,"column":16}},{"generated":{"line":30,"column":27},"source":"index.js","original":{"line":39,"column":27}},{"generated":{"line":30,"column":28},"source":"index.js","original":{"line":39,"column":28}},{"generated":{"line":31,"column":2},"source":"index.js","original":{"line":40,"column":2}},{"generated":{"line":32,"column":0},"source":"index.js","original":{"line":41,"column":0}},{"generated":{"line":32,"column":1},"source":"index.js","original":{"line":41,"column":1}},{"generated":{"line":32,"column":2},"source":"index.js","original":{"line":41,"column":2}},{"generated":{"line":33,"column":0},"source":"index.js","original":{"line":42,"column":0},"name":"console"},{"generated":{"line":33,"column":7},"source":"index.js","original":{"line":42,"column":7}},{"generated":{"line":33,"column":8},"source":"index.js","original":{"line":42,"column":8},"name":"log"},{"generated":{"line":33,"column":11},"source":"index.js","original":{"line":42,"column":11}},{"generated":{"line":33,"column":12},"source":"index.js","original":{"line":42,"column":12}},{"generated":{"line":33,"column":19},"source":"index.js","original":{"line":42,"column":19}},{"generated":{"line":33,"column":20},"source":"index.js","original":{"line":42,"column":20}},{"generated":{"line":34,"column":0},"source":"index.js","original":{"line":43,"column":0}},{"generated":{"line":36,"column":0},"source":"index.js","original":{"line":47,"column":0}},{"generated":{"line":37,"column":0},"source":"index.js","original":{"line":48,"column":0}},{"generated":{"line":38,"column":0},"source":"index.js","original":{"line":49,"column":0}},{"generated":{"line":39,"column":0},"source":"index.js","original":{"line":50,"column":0}},{"generated":{"line":40,"column":0},"source":"index.js","original":{"line":51,"column":0}},{"generated":{"line":41,"column":0},"source":"index.js","original":{"line":52,"column":0}},{"generated":{"line":42,"column":0},"source":"index.js","original":{"line":53,"column":0}},{"generated":{"line":43,"column":0},"source":"index.js","original":{"line":54,"column":0}},{"generated":{"line":44,"column":0},"source":"index.js","original":{"line":55,"column":0}},{"generated":{"line":45,"column":0},"source":"index.js","original":{"line":56,"column":0}},{"generated":{"line":47,"column":0},"source":"index.js","original":{"line":58,"column":0}},{"generated":{"line":48,"column":0},"source":"index.js","original":{"line":59,"column":0}},{"generated":{"line":50,"column":0},"source":"index.js","original":{"line":61,"column":0}},{"generated":{"line":51,"column":0},"source":"index.js","original":{"line":62,"column":0}},{"generated":{"line":52,"column":0},"source":"index.js","original":{"line":63,"column":0}},{"generated":{"line":53,"column":0},"source":"index.js","original":{"line":64,"column":0}},{"generated":{"line":54,"column":0},"source":"index.js","original":{"line":65,"column":0}},{"generated":{"line":55,"column":0},"source":"index.js","original":{"line":66,"column":0}},{"generated":{"line":56,"column":0},"source":"index.js","original":{"line":67,"column":0}},{"generated":{"line":57,"column":0},"source":"index.js","original":{"line":68,"column":0}},{"generated":{"line":58,"column":0},"source":"index.js","original":{"line":69,"column":0}},{"generated":{"line":59,"column":0},"source":"index.js","original":{"line":70,"column":0}},{"generated":{"line":60,"column":0},"source":"index.js","original":{"line":71,"column":0}},{"generated":{"line":61,"column":0},"source":"index.js","original":{"line":72,"column":0}},{"generated":{"line":62,"column":0},"source":"index.js","original":{"line":73,"column":0}},{"generated":{"line":63,"column":0},"source":"index.js","original":{"line":74,"column":0}},{"generated":{"line":64,"column":0},"source":"index.js","original":{"line":75,"column":0}},{"generated":{"line":65,"column":0},"source":"index.js","original":{"line":76,"column":0}},{"generated":{"line":67,"column":0},"source":"index.js","original":{"line":78,"column":0}},{"generated":{"line":68,"column":0},"source":"index.js","original":{"line":79,"column":0}},{"generated":{"line":69,"column":0},"source":"index.js","original":{"line":80,"column":0}},{"generated":{"line":70,"column":0},"source":"index.js","original":{"line":81,"column":0}},{"generated":{"line":71,"column":0},"source":"index.js","original":{"line":82,"column":0}},{"generated":{"line":72,"column":0},"source":"index.js","original":{"line":83,"column":0}},{"generated":{"line":73,"column":0},"source":"index.js","original":{"line":84,"column":0}},{"generated":{"line":74,"column":0},"source":"index.js","original":{"line":85,"column":0}},{"generated":{"line":75,"column":0},"source":"index.js","original":{"line":86,"column":0}},{"generated":{"line":76,"column":0},"source":"index.js","original":{"line":87,"column":0}},{"generated":{"line":78,"column":0},"source":"index.js","original":{"line":91,"column":0}},{"generated":{"line":79,"column":0},"source":"index.js","original":{"line":92,"column":0}},{"generated":{"line":80,"column":0},"source":"index.js","original":{"line":93,"column":0}},{"generated":{"line":81,"column":0},"source":"index.js","original":{"line":94,"column":0}},{"generated":{"line":82,"column":0},"source":"index.js","original":{"line":95,"column":0}},{"generated":{"line":83,"column":0},"source":"index.js","original":{"line":96,"column":0}},{"generated":{"line":84,"column":0},"source":"index.js","original":{"line":97,"column":0}},{"generated":{"line":85,"column":0},"source":"index.js","original":{"line":98,"column":0}},{"generated":{"line":86,"column":0},"source":"index.js","original":{"line":99,"column":0}},{"generated":{"line":87,"column":0},"source":"index.js","original":{"line":100,"column":0}},{"generated":{"line":89,"column":0},"source":"index.js","original":{"line":102,"column":0}},{"generated":{"line":90,"column":0},"source":"index.js","original":{"line":103,"column":0}},{"generated":{"line":92,"column":0},"source":"index.js","original":{"line":105,"column":0}},{"generated":{"line":93,"column":0},"source":"index.js","original":{"line":106,"column":0}},{"generated":{"line":94,"column":0},"source":"index.js","original":{"line":107,"column":0}},{"generated":{"line":95,"column":0},"source":"index.js","original":{"line":108,"column":0}},{"generated":{"line":96,"column":0},"source":"index.js","original":{"line":109,"column":0}},{"generated":{"line":97,"column":0},"source":"index.js","original":{"line":110,"column":0}},{"generated":{"line":98,"column":0},"source":"index.js","original":{"line":111,"column":0}},{"generated":{"line":99,"column":0},"source":"index.js","original":{"line":112,"column":0}},{"generated":{"line":100,"column":0},"source":"index.js","original":{"line":113,"column":0}},{"generated":{"line":101,"column":0},"source":"index.js","original":{"line":114,"column":0}},{"generated":{"line":102,"column":0},"source":"index.js","original":{"line":115,"column":0}},{"generated":{"line":103,"column":0},"source":"index.js","original":{"line":116,"column":0}},{"generated":{"line":104,"column":0},"source":"index.js","original":{"line":117,"column":0}},{"generated":{"line":105,"column":0},"source":"index.js","original":{"line":118,"column":0}},{"generated":{"line":106,"column":0},"source":"index.js","original":{"line":119,"column":0}},{"generated":{"line":107,"column":0},"source":"index.js","original":{"line":120,"column":0}},{"generated":{"line":109,"column":0},"source":"index.js","original":{"line":122,"column":0}},{"generated":{"line":110,"column":0},"source":"index.js","original":{"line":123,"column":0}},{"generated":{"line":111,"column":0},"source":"index.js","original":{"line":124,"column":0}},{"generated":{"line":112,"column":0},"source":"index.js","original":{"line":125,"column":0}},{"generated":{"line":113,"column":0},"source":"index.js","original":{"line":126,"column":0}},{"generated":{"line":114,"column":0},"source":"index.js","original":{"line":127,"column":0}},{"generated":{"line":115,"column":0},"source":"index.js","original":{"line":128,"column":0}},{"generated":{"line":116,"column":0},"source":"index.js","original":{"line":129,"column":0}},{"generated":{"line":117,"column":0},"source":"index.js","original":{"line":130,"column":0}},{"generated":{"line":118,"column":0},"source":"index.js","original":{"line":131,"column":0}},{"generated":{"line":120,"column":0},"source":"index.js","original":{"line":135,"column":0}},{"generated":{"line":121,"column":0},"source":"index.js","original":{"line":136,"column":0}},{"generated":{"line":122,"column":0},"source":"index.js","original":{"line":137,"column":0}},{"generated":{"line":123,"column":0},"source":"index.js","original":{"line":138,"column":0}},{"generated":{"line":124,"column":0},"source":"index.js","original":{"line":139,"column":0}},{"generated":{"line":125,"column":0},"source":"index.js","original":{"line":140,"column":0}},{"generated":{"line":126,"column":0},"source":"index.js","original":{"line":141,"column":0}},{"generated":{"line":127,"column":0},"source":"index.js","original":{"line":142,"column":0}},{"generated":{"line":128,"column":0},"source":"index.js","original":{"line":143,"column":0}},{"generated":{"line":130,"column":0},"source":"index.js","original":{"line":145,"column":0}},{"generated":{"line":131,"column":0},"source":"index.js","original":{"line":146,"column":0}},{"generated":{"line":133,"column":0},"source":"index.js","original":{"line":148,"column":0}},{"generated":{"line":134,"column":0},"source":"index.js","original":{"line":149,"column":0}},{"generated":{"line":135,"column":0},"source":"index.js","original":{"line":150,"column":0}},{"generated":{"line":136,"column":0},"source":"index.js","original":{"line":151,"column":0}},{"generated":{"line":137,"column":0},"source":"index.js","original":{"line":152,"column":0}},{"generated":{"line":138,"column":0},"source":"index.js","original":{"line":153,"column":0}},{"generated":{"line":139,"column":0},"source":"index.js","original":{"line":154,"column":0}},{"generated":{"line":140,"column":0},"source":"index.js","original":{"line":155,"column":0}},{"generated":{"line":141,"column":0},"source":"index.js","original":{"line":156,"column":0}},{"generated":{"line":142,"column":0},"source":"index.js","original":{"line":157,"column":0}},{"generated":{"line":143,"column":0},"source":"index.js","original":{"line":158,"column":0}},{"generated":{"line":145,"column":0},"source":"index.js","original":{"line":160,"column":0}},{"generated":{"line":146,"column":0},"source":"index.js","original":{"line":161,"column":0}},{"generated":{"line":147,"column":0},"source":"index.js","original":{"line":162,"column":0}},{"generated":{"line":148,"column":0},"source":"index.js","original":{"line":163,"column":0}},{"generated":{"line":149,"column":0},"source":"index.js","original":{"line":164,"column":0}},{"generated":{"line":150,"column":0},"source":"index.js","original":{"line":165,"column":0}},{"generated":{"line":151,"column":0},"source":"index.js","original":{"line":166,"column":0}},{"generated":{"line":152,"column":0},"source":"index.js","original":{"line":167,"column":0}},{"generated":{"line":153,"column":0},"source":"index.js","original":{"line":168,"column":0}},{"generated":{"line":154,"column":0},"source":"index.js","original":{"line":169,"column":0}},{"generated":{"line":156,"column":0},"source":"index.js","original":{"line":173,"column":0}},{"generated":{"line":157,"column":0},"source":"index.js","original":{"line":174,"column":0}},{"generated":{"line":159,"column":0},"source":"index.js","original":{"line":176,"column":0}},{"generated":{"line":160,"column":0},"source":"index.js","original":{"line":177,"column":0}},{"generated":{"line":161,"column":0},"source":"index.js","original":{"line":178,"column":0}},{"generated":{"line":163,"column":0},"source":"index.js","original":{"line":180,"column":0}},{"generated":{"line":164,"column":0},"source":"index.js","original":{"line":181,"column":0}},{"generated":{"line":165,"column":0},"source":"index.js","original":{"line":182,"column":0}},{"generated":{"line":166,"column":0},"source":"index.js","original":{"line":183,"column":0}},{"generated":{"line":167,"column":0},"source":"index.js","original":{"line":184,"column":0}},{"generated":{"line":168,"column":0},"source":"index.js","original":{"line":185,"column":0}},{"generated":{"line":169,"column":0},"source":"index.js","original":{"line":186,"column":0}},{"generated":{"line":170,"column":0},"source":"index.js","original":{"line":187,"column":0}},{"generated":{"line":171,"column":0},"source":"index.js","original":{"line":188,"column":0}},{"generated":{"line":172,"column":0},"source":"index.js","original":{"line":189,"column":0}},{"generated":{"line":173,"column":0},"source":"index.js","original":{"line":190,"column":0}},{"generated":{"line":175,"column":0},"source":"index.js","original":{"line":192,"column":0}},{"generated":{"line":176,"column":0},"source":"index.js","original":{"line":193,"column":0}},{"generated":{"line":177,"column":0},"source":"index.js","original":{"line":194,"column":0}},{"generated":{"line":178,"column":0},"source":"index.js","original":{"line":195,"column":0}},{"generated":{"line":179,"column":0},"source":"index.js","original":{"line":196,"column":0}},{"generated":{"line":180,"column":0},"source":"index.js","original":{"line":197,"column":0}},{"generated":{"line":181,"column":0},"source":"index.js","original":{"line":198,"column":0}},{"generated":{"line":182,"column":0},"source":"index.js","original":{"line":199,"column":0}},{"generated":{"line":183,"column":0},"source":"index.js","original":{"line":200,"column":0}},{"generated":{"line":184,"column":0},"source":"index.js","original":{"line":201,"column":0}},{"generated":{"line":185,"column":0},"source":"index.js","original":{"line":202,"column":0}},{"generated":{"line":186,"column":0},"source":"index.js","original":{"line":203,"column":0}},{"generated":{"line":187,"column":0},"source":"index.js","original":{"line":204,"column":0}},{"generated":{"line":189,"column":0},"source":"index.js","original":{"line":208,"column":0}},{"generated":{"line":190,"column":0},"source":"index.js","original":{"line":209,"column":0}},{"generated":{"line":191,"column":0},"source":"index.js","original":{"line":210,"column":0}},{"generated":{"line":192,"column":0},"source":"index.js","original":{"line":211,"column":0}},{"generated":{"line":193,"column":0},"source":"index.js","original":{"line":212,"column":0}},{"generated":{"line":194,"column":0},"source":"index.js","original":{"line":213,"column":0}},{"generated":{"line":195,"column":0},"source":"index.js","original":{"line":214,"column":0}},{"generated":{"line":196,"column":0},"source":"index.js","original":{"line":215,"column":0}},{"generated":{"line":197,"column":0},"source":"index.js","original":{"line":216,"column":0}},{"generated":{"line":199,"column":0},"source":"index.js","original":{"line":218,"column":0}},{"generated":{"line":200,"column":0},"source":"index.js","original":{"line":219,"column":0}},{"generated":{"line":201,"column":0},"source":"index.js","original":{"line":220,"column":0}},{"generated":{"line":202,"column":0},"source":"index.js","original":{"line":221,"column":0}},{"generated":{"line":203,"column":0},"source":"index.js","original":{"line":222,"column":0}},{"generated":{"line":204,"column":0},"source":"index.js","original":{"line":223,"column":0}},{"generated":{"line":205,"column":0},"source":"index.js","original":{"line":224,"column":0}},{"generated":{"line":206,"column":0},"source":"index.js","original":{"line":225,"column":0}},{"generated":{"line":207,"column":0},"source":"index.js","original":{"line":226,"column":0}},{"generated":{"line":208,"column":0},"source":"index.js","original":{"line":227,"column":0}},{"generated":{"line":209,"column":0},"source":"index.js","original":{"line":228,"column":0}},{"generated":{"line":210,"column":0},"source":"index.js","original":{"line":229,"column":0}},{"generated":{"line":211,"column":0},"source":"index.js","original":{"line":230,"column":0}},{"generated":{"line":213,"column":0},"source":"index.js","original":{"line":232,"column":0}},{"generated":{"line":214,"column":0},"source":"index.js","original":{"line":233,"column":0}},{"generated":{"line":215,"column":0},"source":"index.js","original":{"line":234,"column":0}},{"generated":{"line":216,"column":0},"source":"index.js","original":{"line":235,"column":0}},{"generated":{"line":217,"column":0},"source":"index.js","original":{"line":236,"column":0}},{"generated":{"line":218,"column":0},"source":"index.js","original":{"line":237,"column":0}},{"generated":{"line":219,"column":0},"source":"index.js","original":{"line":238,"column":0}},{"generated":{"line":220,"column":0},"source":"index.js","original":{"line":239,"column":0}},{"generated":{"line":221,"column":0},"source":"index.js","original":{"line":240,"column":0}},{"generated":{"line":222,"column":0},"source":"index.js","original":{"line":241,"column":0}},{"generated":{"line":224,"column":0},"source":"index.js","original":{"line":245,"column":0}},{"generated":{"line":225,"column":0},"source":"index.js","original":{"line":246,"column":0}},{"generated":{"line":226,"column":0},"source":"index.js","original":{"line":247,"column":0}},{"generated":{"line":227,"column":0},"source":"index.js","original":{"line":248,"column":0}},{"generated":{"line":228,"column":0},"source":"index.js","original":{"line":249,"column":0}},{"generated":{"line":229,"column":0},"source":"index.js","original":{"line":250,"column":0}},{"generated":{"line":230,"column":0},"source":"index.js","original":{"line":251,"column":0}},{"generated":{"line":231,"column":0},"source":"index.js","original":{"line":252,"column":0}},{"generated":{"line":232,"column":0},"source":"index.js","original":{"line":253,"column":0}},{"generated":{"line":234,"column":0},"source":"index.js","original":{"line":255,"column":0}},{"generated":{"line":235,"column":0},"source":"index.js","original":{"line":256,"column":0}},{"generated":{"line":236,"column":0},"source":"index.js","original":{"line":257,"column":0}},{"generated":{"line":237,"column":0},"source":"index.js","original":{"line":258,"column":0}},{"generated":{"line":238,"column":0},"source":"index.js","original":{"line":259,"column":0}},{"generated":{"line":239,"column":0},"source":"index.js","original":{"line":260,"column":0}},{"generated":{"line":240,"column":0},"source":"index.js","original":{"line":261,"column":0}},{"generated":{"line":241,"column":0},"source":"index.js","original":{"line":262,"column":0}},{"generated":{"line":242,"column":0},"source":"index.js","original":{"line":263,"column":0}},{"generated":{"line":243,"column":0},"source":"index.js","original":{"line":264,"column":0}},{"generated":{"line":244,"column":0},"source":"index.js","original":{"line":265,"column":0}},{"generated":{"line":246,"column":0},"source":"index.js","original":{"line":267,"column":0}},{"generated":{"line":247,"column":0},"source":"index.js","original":{"line":268,"column":0}},{"generated":{"line":248,"column":0},"source":"index.js","original":{"line":269,"column":0}},{"generated":{"line":249,"column":0},"source":"index.js","original":{"line":270,"column":0}},{"generated":{"line":250,"column":0},"source":"index.js","original":{"line":271,"column":0}},{"generated":{"line":251,"column":0},"source":"index.js","original":{"line":272,"column":0}},{"generated":{"line":252,"column":0},"source":"index.js","original":{"line":273,"column":0}},{"generated":{"line":253,"column":0},"source":"index.js","original":{"line":274,"column":0}},{"generated":{"line":254,"column":0},"source":"index.js","original":{"line":275,"column":0}},{"generated":{"line":255,"column":0},"source":"index.js","original":{"line":276,"column":0}},{"generated":{"line":257,"column":0},"source":"index.js","original":{"line":280,"column":0}},{"generated":{"line":258,"column":0},"source":"index.js","original":{"line":281,"column":0}},{"generated":{"line":259,"column":0},"source":"index.js","original":{"line":282,"column":0}},{"generated":{"line":260,"column":0},"source":"index.js","original":{"line":283,"column":0}},{"generated":{"line":261,"column":0},"source":"index.js","original":{"line":284,"column":0}},{"generated":{"line":262,"column":0},"source":"index.js","original":{"line":285,"column":0}},{"generated":{"line":263,"column":0},"source":"index.js","original":{"line":286,"column":0}},{"generated":{"line":264,"column":0},"source":"index.js","original":{"line":287,"column":0}},{"generated":{"line":265,"column":0},"source":"index.js","original":{"line":288,"column":0}},{"generated":{"line":266,"column":0},"source":"index.js","original":{"line":289,"column":0}},{"generated":{"line":267,"column":0},"source":"index.js","original":{"line":290,"column":0}},{"generated":{"line":268,"column":0},"source":"index.js","original":{"line":291,"column":0}},{"generated":{"line":270,"column":0},"source":"index.js","original":{"line":293,"column":0}},{"generated":{"line":271,"column":0},"source":"index.js","original":{"line":294,"column":0}},{"generated":{"line":272,"column":0},"source":"index.js","original":{"line":295,"column":0}},{"generated":{"line":273,"column":0},"source":"index.js","original":{"line":296,"column":0}},{"generated":{"line":274,"column":0},"source":"index.js","original":{"line":297,"column":0}},{"generated":{"line":275,"column":0},"source":"index.js","original":{"line":298,"column":0}},{"generated":{"line":277,"column":0},"source":"index.js","original":{"line":300,"column":0}},{"generated":{"line":278,"column":0},"source":"index.js","original":{"line":301,"column":0}},{"generated":{"line":279,"column":0},"source":"index.js","original":{"line":302,"column":0}},{"generated":{"line":280,"column":0},"source":"index.js","original":{"line":303,"column":0}},{"generated":{"line":281,"column":0},"source":"index.js","original":{"line":304,"column":0}},{"generated":{"line":282,"column":0},"source":"index.js","original":{"line":305,"column":0}},{"generated":{"line":283,"column":0},"source":"index.js","original":{"line":306,"column":0}},{"generated":{"line":284,"column":0},"source":"index.js","original":{"line":307,"column":0}},{"generated":{"line":285,"column":0},"source":"index.js","original":{"line":308,"column":0}},{"generated":{"line":286,"column":0},"source":"index.js","original":{"line":309,"column":0}},{"generated":{"line":288,"column":0},"source":"index.js","original":{"line":313,"column":0}},{"generated":{"line":289,"column":0},"source":"index.js","original":{"line":314,"column":0}},{"generated":{"line":290,"column":0},"source":"index.js","original":{"line":315,"column":0}},{"generated":{"line":291,"column":0},"source":"index.js","original":{"line":316,"column":0}},{"generated":{"line":292,"column":0},"source":"index.js","original":{"line":317,"column":0}},{"generated":{"line":293,"column":0},"source":"index.js","original":{"line":318,"column":0}},{"generated":{"line":294,"column":0},"source":"index.js","original":{"line":319,"column":0}},{"generated":{"line":295,"column":0},"source":"index.js","original":{"line":320,"column":0}},{"generated":{"line":296,"column":0},"source":"index.js","original":{"line":321,"column":0}},{"generated":{"line":298,"column":0},"source":"index.js","original":{"line":323,"column":0}},{"generated":{"line":299,"column":0},"source":"index.js","original":{"line":324,"column":0}},{"generated":{"line":300,"column":0},"source":"index.js","original":{"line":325,"column":0}},{"generated":{"line":301,"column":0},"source":"index.js","original":{"line":326,"column":0}},{"generated":{"line":302,"column":0},"source":"index.js","original":{"line":327,"column":0}},{"generated":{"line":303,"column":0},"source":"index.js","original":{"line":328,"column":0}},{"generated":{"line":304,"column":0},"source":"index.js","original":{"line":329,"column":0}},{"generated":{"line":305,"column":0},"source":"index.js","original":{"line":330,"column":0}},{"generated":{"line":306,"column":0},"source":"index.js","original":{"line":331,"column":0}},{"generated":{"line":308,"column":0},"source":"index.js","original":{"line":333,"column":0}},{"generated":{"line":309,"column":0},"source":"index.js","original":{"line":334,"column":0}},{"generated":{"line":310,"column":0},"source":"index.js","original":{"line":335,"column":0}},{"generated":{"line":311,"column":0},"source":"index.js","original":{"line":336,"column":0}},{"generated":{"line":312,"column":0},"source":"index.js","original":{"line":337,"column":0}},{"generated":{"line":313,"column":0},"source":"index.js","original":{"line":338,"column":0}},{"generated":{"line":314,"column":0},"source":"index.js","original":{"line":339,"column":0}},{"generated":{"line":315,"column":0},"source":"index.js","original":{"line":340,"column":0}},{"generated":{"line":316,"column":0},"source":"index.js","original":{"line":341,"column":0}},{"generated":{"line":317,"column":0},"source":"index.js","original":{"line":342,"column":0}},{"generated":{"line":319,"column":0},"source":"index.js","original":{"line":346,"column":0}},{"generated":{"line":320,"column":0},"source":"index.js","original":{"line":347,"column":0}},{"generated":{"line":322,"column":0},"source":"index.js","original":{"line":349,"column":0}},{"generated":{"line":324,"column":0},"source":"index.js","original":{"line":351,"column":0}},{"generated":{"line":325,"column":0},"source":"index.js","original":{"line":352,"column":0}},{"generated":{"line":326,"column":0},"source":"index.js","original":{"line":353,"column":0}},{"generated":{"line":327,"column":0},"source":"index.js","original":{"line":354,"column":0}},{"generated":{"line":328,"column":0},"source":"index.js","original":{"line":355,"column":0}},{"generated":{"line":330,"column":0},"source":"index.js","original":{"line":357,"column":0}},{"generated":{"line":331,"column":0},"source":"index.js","original":{"line":358,"column":0}},{"generated":{"line":332,"column":0},"source":"index.js","original":{"line":359,"column":0}},{"generated":{"line":333,"column":0},"source":"index.js","original":{"line":360,"column":0}},{"generated":{"line":334,"column":0},"source":"index.js","original":{"line":361,"column":0}},{"generated":{"line":335,"column":0},"source":"index.js","original":{"line":362,"column":0}},{"generated":{"line":336,"column":0},"source":"index.js","original":{"line":363,"column":0}},{"generated":{"line":337,"column":0},"source":"index.js","original":{"line":364,"column":0}},{"generated":{"line":338,"column":0},"source":"index.js","original":{"line":365,"column":0}},{"generated":{"line":339,"column":0},"source":"index.js","original":{"line":366,"column":0}},{"generated":{"line":341,"column":0},"source":"index.js","original":{"line":370,"column":0}},{"generated":{"line":342,"column":0},"source":"index.js","original":{"line":371,"column":0}},{"generated":{"line":343,"column":0},"source":"index.js","original":{"line":372,"column":0}},{"generated":{"line":344,"column":0},"source":"index.js","original":{"line":373,"column":0}},{"generated":{"line":345,"column":0},"source":"index.js","original":{"line":374,"column":0}},{"generated":{"line":346,"column":0},"source":"index.js","original":{"line":375,"column":0}},{"generated":{"line":347,"column":0},"source":"index.js","original":{"line":376,"column":0}},{"generated":{"line":349,"column":0},"source":"index.js","original":{"line":380,"column":0}},{"generated":{"line":350,"column":0},"source":"index.js","original":{"line":381,"column":0}},{"generated":{"line":351,"column":0},"source":"index.js","original":{"line":382,"column":0}},{"generated":{"line":352,"column":0},"source":"index.js","original":{"line":383,"column":0}},{"generated":{"line":353,"column":0},"source":"index.js","original":{"line":384,"column":0}},{"generated":{"line":354,"column":0},"source":"index.js","original":{"line":385,"column":0}},{"generated":{"line":355,"column":0},"source":"index.js","original":{"line":386,"column":0}},{"generated":{"line":356,"column":0},"source":"index.js","original":{"line":387,"column":0}},{"generated":{"line":357,"column":0},"source":"index.js","original":{"line":388,"column":0}},{"generated":{"line":358,"column":0},"source":"index.js","original":{"line":389,"column":0}},{"generated":{"line":359,"column":0},"source":"index.js","original":{"line":390,"column":0}},{"generated":{"line":360,"column":0},"source":"index.js","original":{"line":391,"column":0}},{"generated":{"line":361,"column":0},"source":"index.js","original":{"line":392,"column":0}},{"generated":{"line":362,"column":0},"source":"index.js","original":{"line":393,"column":0}},{"generated":{"line":363,"column":0},"source":"index.js","original":{"line":394,"column":0}},{"generated":{"line":364,"column":0},"source":"index.js","original":{"line":395,"column":0}},{"generated":{"line":366,"column":0},"source":"index.js","original":{"line":397,"column":0}},{"generated":{"line":368,"column":0},"source":"index.js","original":{"line":399,"column":0}},{"generated":{"line":369,"column":0},"source":"index.js","original":{"line":400,"column":0}},{"generated":{"line":370,"column":0},"source":"index.js","original":{"line":401,"column":0}},{"generated":{"line":372,"column":0},"source":"index.js","original":{"line":403,"column":0}},{"generated":{"line":373,"column":0},"source":"index.js","original":{"line":404,"column":0}},{"generated":{"line":374,"column":0},"source":"index.js","original":{"line":405,"column":0}},{"generated":{"line":375,"column":0},"source":"index.js","original":{"line":406,"column":0}},{"generated":{"line":377,"column":0},"source":"index.js","original":{"line":408,"column":0}},{"generated":{"line":378,"column":0},"source":"index.js","original":{"line":409,"column":0}},{"generated":{"line":379,"column":0},"source":"index.js","original":{"line":410,"column":0}},{"generated":{"line":380,"column":0},"source":"index.js","original":{"line":411,"column":0}},{"generated":{"line":381,"column":0},"source":"index.js","original":{"line":412,"column":0}},{"generated":{"line":382,"column":0},"source":"index.js","original":{"line":413,"column":0}},{"generated":{"line":383,"column":0},"source":"index.js","original":{"line":414,"column":0}},{"generated":{"line":384,"column":0},"source":"index.js","original":{"line":415,"column":0}},{"generated":{"line":385,"column":0},"source":"index.js","original":{"line":416,"column":0}},{"generated":{"line":386,"column":0},"source":"index.js","original":{"line":417,"column":0}},{"generated":{"line":388,"column":0},"source":"index.js","original":{"line":421,"column":0}},{"generated":{"line":389,"column":0},"source":"index.js","original":{"line":422,"column":0}},{"generated":{"line":390,"column":0},"source":"index.js","original":{"line":423,"column":0}},{"generated":{"line":391,"column":0},"source":"index.js","original":{"line":424,"column":0}},{"generated":{"line":393,"column":0},"source":"index.js","original":{"line":426,"column":0}},{"generated":{"line":394,"column":0},"source":"index.js","original":{"line":427,"column":0}},{"generated":{"line":395,"column":0},"source":"index.js","original":{"line":428,"column":0}},{"generated":{"line":396,"column":0},"source":"index.js","original":{"line":429,"column":0}},{"generated":{"line":397,"column":0},"source":"index.js","original":{"line":430,"column":0}},{"generated":{"line":398,"column":0},"source":"index.js","original":{"line":431,"column":0}},{"generated":{"line":399,"column":0},"source":"index.js","original":{"line":432,"column":0}},{"generated":{"line":400,"column":0},"source":"index.js","original":{"line":433,"column":0}},{"generated":{"line":401,"column":0},"source":"index.js","original":{"line":434,"column":0}},{"generated":{"line":402,"column":0},"source":"index.js","original":{"line":435,"column":0}},{"generated":{"line":403,"column":0},"source":"index.js","original":{"line":436,"column":0}},{"generated":{"line":404,"column":0},"source":"index.js","original":{"line":437,"column":0}},{"generated":{"line":405,"column":0},"source":"index.js","original":{"line":438,"column":0}},{"generated":{"line":407,"column":0},"source":"index.js","original":{"line":442,"column":0}},{"generated":{"line":408,"column":0},"source":"index.js","original":{"line":443,"column":0}},{"generated":{"line":409,"column":0},"source":"index.js","original":{"line":444,"column":0}},{"generated":{"line":411,"column":0},"source":"index.js","original":{"line":446,"column":0}},{"generated":{"line":412,"column":0},"source":"index.js","original":{"line":447,"column":0}},{"generated":{"line":413,"column":0},"source":"index.js","original":{"line":448,"column":0}},{"generated":{"line":414,"column":0},"source":"index.js","original":{"line":449,"column":0}},{"generated":{"line":415,"column":0},"source":"index.js","original":{"line":450,"column":0}},{"generated":{"line":416,"column":0},"source":"index.js","original":{"line":451,"column":0}},{"generated":{"line":417,"column":0},"source":"index.js","original":{"line":452,"column":0}},{"generated":{"line":418,"column":0},"source":"index.js","original":{"line":453,"column":0}},{"generated":{"line":419,"column":0},"source":"index.js","original":{"line":454,"column":0}},{"generated":{"line":420,"column":0},"source":"index.js","original":{"line":455,"column":0}},{"generated":{"line":421,"column":0},"source":"index.js","original":{"line":456,"column":0}},{"generated":{"line":423,"column":0},"source":"index.js","original":{"line":459,"column":0}},{"generated":{"line":424,"column":0},"source":"index.js","original":{"line":460,"column":0}},{"generated":{"line":426,"column":0},"source":"index.js","original":{"line":462,"column":0}},{"generated":{"line":427,"column":0},"source":"index.js","original":{"line":463,"column":0}},{"generated":{"line":428,"column":0},"source":"index.js","original":{"line":464,"column":0}},{"generated":{"line":429,"column":0},"source":"index.js","original":{"line":465,"column":0}},{"generated":{"line":430,"column":0},"source":"index.js","original":{"line":466,"column":0}},{"generated":{"line":431,"column":0},"source":"index.js","original":{"line":467,"column":0}},{"generated":{"line":432,"column":0},"source":"index.js","original":{"line":468,"column":0}},{"generated":{"line":434,"column":0},"source":"index.js","original":{"line":471,"column":0}},{"generated":{"line":435,"column":0},"source":"index.js","original":{"line":472,"column":0}},{"generated":{"line":437,"column":0},"source":"index.js","original":{"line":474,"column":0}},{"generated":{"line":438,"column":0},"source":"index.js","original":{"line":475,"column":0}},{"generated":{"line":439,"column":0},"source":"index.js","original":{"line":476,"column":0}},{"generated":{"line":440,"column":0},"source":"index.js","original":{"line":477,"column":0}},{"generated":{"line":441,"column":0},"source":"index.js","original":{"line":478,"column":0}},{"generated":{"line":443,"column":0},"source":"index.js","original":{"line":481,"column":0}},{"generated":{"line":444,"column":0},"source":"index.js","original":{"line":482,"column":0}},{"generated":{"line":446,"column":0},"source":"index.js","original":{"line":484,"column":0}},{"generated":{"line":447,"column":0},"source":"index.js","original":{"line":485,"column":0}},{"generated":{"line":448,"column":0},"source":"index.js","original":{"line":486,"column":0}},{"generated":{"line":449,"column":0},"source":"index.js","original":{"line":487,"column":0}},{"generated":{"line":450,"column":0},"source":"index.js","original":{"line":488,"column":0}},{"generated":{"line":452,"column":0},"source":"index.js","original":{"line":491,"column":0}},{"generated":{"line":454,"column":0},"source":"index.js","original":{"line":493,"column":0}},{"generated":{"line":455,"column":0},"source":"index.js","original":{"line":494,"column":0}},{"generated":{"line":456,"column":0},"source":"index.js","original":{"line":495,"column":0}},{"generated":{"line":457,"column":0},"source":"index.js","original":{"line":496,"column":0}},{"generated":{"line":458,"column":0},"source":"index.js","original":{"line":497,"column":0}},{"generated":{"line":459,"column":0},"source":"index.js","original":{"line":498,"column":0}},{"generated":{"line":460,"column":0},"source":"index.js","original":{"line":499,"column":0}},{"generated":{"line":461,"column":0},"source":"index.js","original":{"line":500,"column":0}},{"generated":{"line":462,"column":0},"source":"index.js","original":{"line":501,"column":0}},{"generated":{"line":463,"column":0},"source":"index.js","original":{"line":502,"column":0}},{"generated":{"line":464,"column":0},"source":"index.js","original":{"line":503,"column":0}},{"generated":{"line":465,"column":0},"source":"index.js","original":{"line":504,"column":0}},{"generated":{"line":466,"column":0},"source":"index.js","original":{"line":505,"column":0}},{"generated":{"line":467,"column":0},"source":"index.js","original":{"line":506,"column":0}},{"generated":{"line":468,"column":0},"source":"index.js","original":{"line":507,"column":0}},{"generated":{"line":469,"column":0},"source":"index.js","original":{"line":508,"column":0}},{"generated":{"line":471,"column":0},"source":"index.js","original":{"line":510,"column":0}},{"generated":{"line":473,"column":0},"source":"index.js","original":{"line":512,"column":0}},{"generated":{"line":474,"column":0},"source":"index.js","original":{"line":513,"column":0}},{"generated":{"line":475,"column":0},"source":"index.js","original":{"line":514,"column":0}},{"generated":{"line":476,"column":0},"source":"index.js","original":{"line":515,"column":0}},{"generated":{"line":477,"column":0},"source":"index.js","original":{"line":516,"column":0}},{"generated":{"line":478,"column":0},"source":"index.js","original":{"line":517,"column":0}},{"generated":{"line":479,"column":0},"source":"index.js","original":{"line":518,"column":0}},{"generated":{"line":480,"column":0},"source":"index.js","original":{"line":519,"column":0}},{"generated":{"line":481,"column":0},"source":"index.js","original":{"line":520,"column":0}},{"generated":{"line":482,"column":0},"source":"index.js","original":{"line":521,"column":0}},{"generated":{"line":483,"column":0},"source":"index.js","original":{"line":522,"column":0}},{"generated":{"line":485,"column":0},"source":"index.js","original":{"line":524,"column":0}},{"generated":{"line":486,"column":0},"source":"index.js","original":{"line":525,"column":0}},{"generated":{"line":487,"column":0},"source":"index.js","original":{"line":526,"column":0}},{"generated":{"line":489,"column":0},"source":"index.js","original":{"line":528,"column":0}}],"sources":{"index.js":"\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------//\r\n// exhaustMap Operator //              Do not run if 1 observble already running.\r\n// ___________________________________________\r\n// Example on Marble Diagram:                 \\   \r\n// exhaustMap(() => interval(1000))             \\       \r\n// Input-----(-)-------(-)------------------->  \\      \r\n// Intervall-----------Ignored------>             \\      \r\n// Intervall-(0)--(1)--(0)--(1)--->               \\                   \r\n// Output----(0)--(1)--(0)--(1)----->              \\                 \r\n// _________________________________________________\\          \r\n\r\nimport { fromEvent, take, tap, exhaustMap } from \"rxjs\";\r\nimport { ajax } from 'rxjs/ajax';\r\n\r\nconst button = document.querySelector('#btn')\r\nconst observable = fromEvent(\r\n  button, 'click'\r\n).pipe(\r\n  exhaustMap(() => {                       // Will wait first request completed and then run new one.\r\n    return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\r\n      take(5),\r\n      tap({\r\n        complete() {\r\n          console.log('inner observable has been completed')\r\n        }\r\n      })\r\n    )\r\n  }),\r\n)\r\n\r\nconst subscription = observable.subscribe({\r\n  next(value) {\r\n    console.log(value)\r\n  },\r\n  complete() {\r\n    console.log('completed')\r\n  }\r\n})\r\nconsole.log('hello')\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n// //----------------------------------------------------------------------------------------------------------//\r\n// // concatMap Operator //           Works like switchMap but it allows only 1 observable to be run at the same time. But instead of stopping prev observable, it put a new 1 in the queue\r\n// // ___________________________________________\r\n// // Example on Marble Diagram:                 \\   \r\n// // concatMap(() => interval(1000))             \\        In this scenario first observable will run forever.\r\n// // Input-----(-)-------(-)------------------->  \\      \r\n// // Intervall-----------Queued------>             \\      \r\n// // Intervall-(0)--(1)--(0)--(1)--->               \\                   \r\n// // Output----(0)--(1)--(0)--(1)----->              \\                 \r\n// // _________________________________________________\\          \r\n\r\n// import { fromEvent, switchMap, interval, take, tap, concatMap } from \"rxjs\";\r\n// import { ajax } from 'rxjs/ajax';\r\n\r\n// const button = document.querySelector('#btn')\r\n// const observable = fromEvent(\r\n//   button, 'click'\r\n// ).pipe(\r\n//   concatMap(() => {                       // Will wait first request completed and then run new one.\r\n//     return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\r\n//       take(5),\r\n//       tap({\r\n//         complete() {\r\n//           console.log('inner observable has been completed')\r\n//         }\r\n//       })\r\n//     )\r\n//   }),\r\n//   // take(5)\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n// //----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n// //----------------------------------------------------------------------------------------------------------//\r\n// // switchMap Operator //               Will stop running already running observable and run new 1 \r\n// // ___________________________________________\r\n// // Example on Marble Diagram:                 \\   \r\n// // switchMap(() => interval(1000))             \\        \r\n// // Input-----(-)-------(-)------------------->  \\      \r\n// // Intervall-----------(0)--(1)------>           \\      \r\n// // Intervall-(0)--(1)|------->                    \\                   \r\n// // Output----(0)--(1)--(0)--(1)----->              \\                 \r\n// // _________________________________________________\\          \r\n\r\n// import { fromEvent, switchMap, interval, take, tap } from \"rxjs\";\r\n// import { ajax } from 'rxjs/ajax';\r\n\r\n// const button = document.querySelector('#btn')\r\n// const observable = fromEvent(\r\n//   button, 'click'\r\n// ).pipe(\r\n//   switchMap(() => {\r\n//     return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\r\n//       take(5),\r\n//       tap({\r\n//         complete() {\r\n//           console.log('inner observable has been completed')\r\n//         }\r\n//       })\r\n//     )\r\n//   }),\r\n//   // take(5)\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n// //----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n// //----------------------------------------------------------------------------------------------------------//\r\n// // mergeMap Operator //     \r\n// // ___________________________________________\r\n// // Example on Marble Diagram:                 \\   \r\n// // mergeMap(() => interval(1000))              \\        \r\n// // Input-----(-)------->                        \\      \r\n// // Intervall-(1)--(2)--(3)--(4)--(5)------->     \\                   \r\n// // Output----(1)--(2)--(3)--(4)--(5)------->      \\                 \r\n// // ________________________________________________\\          \r\n\r\n// import { fromEvent, mergeMap, interval, take, tap } from \"rxjs\";\r\n// import { ajax } from 'rxjs/ajax';\r\n\r\n// const button = document.querySelector('#btn')\r\n// const observable = fromEvent(\r\n//   button, 'click'\r\n// ).pipe(\r\n//   mergeMap(() => {\r\n//     return interval(1000).pipe(\r\n//       tap(console.log)\r\n//     )\r\n//   }),\r\n//   take(5)\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n// //----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n// //----------------------------------------------------------------------------------------------------------//\r\n// // Flattening Operators //               \r\n\r\n// import { fromEvent, map } from \"rxjs\";\r\n// import { ajax } from 'rxjs/ajax';\r\n// // ajax is for initiating https requests \r\n\r\n// const button = document.querySelector('#btn')\r\n// const observable = fromEvent(\r\n//   button, 'click'\r\n//   // document.querySelector('#btn'), 'click'\r\n// ).pipe(\r\n//   map(() => {\r\n//     return ajax.getJSON(\r\n//       'https://jsonplaceholder.typicode.com/todos/1'\r\n//     )\r\n//   })\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {                                   \r\n//     value.subscribe(console.log)                  // We will recive response of the second obsevble \r\n//   },\r\n//   // next(value) {\r\n//   //   console.log(value)\r\n//   // },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n// //----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------//\r\n// Tap Operator //                Used to be used for debugging\r\n// ___________________________________________\r\n// Example on Marble Diagram:                 \\   \r\n// tap(console.log)                            \\        \r\n// Input--(1)--(2)--(3)--(4)--(5)------->       \\                        \r\n// Output-(1)--(2)--(3)--(4)--(5)------->       \\                 \r\n// _______________________________________________\\\r\n// import { interval, reduce, take, tap } from \"rxjs\";\r\n\r\n// const observable = interval(500).pipe(\r\n//   take(5),\r\n//   // tap(console.log),                         // Will show every step of compiling reducer. Good for debuging.\r\n//   tap({\r\n//     next(val) {\r\n//       console.log(val)\r\n//     }\r\n//   }), \r\n//   reduce(\r\n//     (acc, val) => acc + val,\r\n//     0\r\n//   )\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------//\r\n// Take Operator //\r\n// ___________________________________________\r\n// Example on Marble Diagram:                 \\   \r\n// take(5)                                     \\        \r\n// Input--(1)--(2)--(3)--(4)--(5)--(6)-->       \\                        \r\n// Output-(1)--(2)--(3)--(4)--(5)|------->       \\                 \r\n// _______________________________________________\\\r\n// import { interval, reduce, take, scan } from \"rxjs\";\r\n\r\n// const observable = interval(500).pipe(\r\n//   take(5),\r\n//   scan(\r\n//     (acc, val) => acc + val,\r\n//     0\r\n//   )\r\n//   // reduce(\r\n//   //   (acc, val) => acc + val,\r\n//   //   0\r\n//   // )\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------//\r\n// Reduce Operator //\r\n// _________________________________________\r\n// Example on Marble Diagram:              \\   \r\n// reduce(                                  \\\r\n//   (acc, value) => acc + value,            \\\r\n//   0                                        \\\r\n// )                                           \\        \r\n// Input---(1)--(2)--(3)---->                   \\                        \r\n// Output------------(6)-->                      \\                 \r\n// _______________________________________________\\\r\n// import { of, reduce } from \"rxjs\";\r\n\r\n// const observable = of(1,2,3,4,5).pipe(\r\n//   reduce(\r\n//     (acc, val) => acc + val,\r\n//     0\r\n//   )\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------//\r\n// Filter Operator //\r\n// ____________________________________________\r\n// Example on Marble Diagram:                 \\   \r\n// filter(value => value > 3)                  \\        \r\n// Input---(1)--(2)--(3)--(4)--(5)-->           \\                        \r\n// Output-----------------(4)--(5)-->            \\                 \r\n// _______________________________________________\\\r\n// import { map, fromEvent, filter } from \"rxjs\";\r\n\r\n// const observable = fromEvent(\r\n//   document, 'keydown'\r\n// ).pipe(\r\n//   map(event => {\r\n//     event.code === 'Space' ? event.code : null     // Shorter version.\r\n//   })\r\n//   // map(event => event.code),\r\n//   // filter(code => code === 'Space')  // Will allow only space to be consoled.\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------//\r\n// FromEvent Operator //\r\n\r\n// import { map, fromEvent } from \"rxjs\";\r\n\r\n// const observable = fromEvent(\r\n//   document, 'keydown'\r\n// ).pipe(\r\n//   map(event => event.code)\r\n// )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n// PLuck Operator //\r\n// ____________________________________________\r\n// Example on Marble Diagram:                  \\           \r\n// Input---({v:1})--({v:2})--({v:3})-->         \\                        \r\n// Output--(1)--(2)--(3)-->                      \\                 \r\n// ________________________________________________\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n// Pipeable Operators //\r\n// They are functions for transforming, filtering, and combining data. \r\n// --------------------------------------------------------\r\n// New Solutuin:                                           \\\r\n// observable.pipe (                                       \\\r\n//   firstOperator(config),                                 \\\r\n//   secondOperator(confug)                                  \\\r\n// ).subscribe()                                                          \\\r\n// -------------------------------------------------------------\r\n// Old Solution:                                                 \\       \r\n// const observble = new Observable()                            \\\r\n// const operatorFunc = firstOperator(config)                     \\   \r\n// const newObservble = operatorFunc(observable)                   \\             \r\n// const operatorFuncTwo = secondOperator(config)                   \\             \r\n// const newObservbleTwo = operatorFuncTwo(newObservable)            \\     \r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n// import { of, map } from \"rxjs\";\r\n\r\n// const observable = of(1,2,3,4,5).pipe(\r\n//   map((value) => `$${value}`)\r\n// )\r\n\r\n// // const observable = of(1,2,3,4,5)\r\n// // const numbersWithSymbols = observable.pipe(\r\n// //   map((value) => `$${value}`)\r\n// // )\r\n\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n// From will loop throw the array and give us -> // 1 // 2 // 3 // 4 // 5 // completed // hello //\r\n// It even can loop throw string. const observable = from('alex')   ->    // a // l // e // x // completed // hello //\r\n// In case of 'from(fetch('https://jsonplaceholder.typicode.com/todos/1'))' we will get response back. // hello // {promise object} // complete //\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n// import { from } from \"rxjs\";\r\n// const observable = from(fetch('https://jsonplaceholder.typicode.com/todos/1'))\r\n// // const observable = from('alex')\r\n// // const observable = from([1,2,3,4,5])\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n\r\n\r\n\r\n// Of will give us -> // 1 // 2 // 3 // 4 // 5 // completed // hello //\r\n// If we put inside of OF an array it will not loop throw array and just give us -> // [1,2,3,4,5] // completed // hello //\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n// import { of } from \"rxjs\";\r\n// const observable = of(1,2,3,4,5)\r\n// const subscription = observable.subscribe({\r\n//   next(value) {\r\n//     console.log(value)\r\n//   },\r\n//   complete() {\r\n//     console.log('completed')\r\n//   }\r\n// })\r\n// console.log('hello')\r\n\r\n\r\n// FromEvent have 2 parametrs. Here we are listening for document and 'click' event. As well we need to insubscribe to avoid memory leak.\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n// import { fromEvent } from \"rxjs\";\r\n// const observable = fromEvent(\r\n//   document, 'click'\r\n// )\r\n// const subscription = observable.subscribe(\r\n//   console.log\r\n// )\r\n\r\n\r\n// Timer will run from 0 to 1000 \r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n// import { timer } from \"rxjs\";\r\n// const observable = timer(0, 1000)\r\n// const subscription = observable.subscribe(\r\n//   console.log\r\n// )\r\n\r\n\r\n// Interval will run for ever with interval of 1000\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n// import { interval } from \"rxjs\";\r\n// const observable = interval(1000)\r\n// const subscription = observable.subscribe(\r\n//   console.log\r\n// )\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------------//\r\n\r\n// import { Observable } from \"rxjs\";\r\n// const observable = new Observable((subscriber) => {\r\n//   const id = setInterval(() => {\r\n//     subscriber.next('test')\r\n//     console.log('leak')\r\n//   }, 1000)\r\n//   // subscriber.complete()            // Without this observble will run for ever \r\n//   return () => {\r\n//     clearInterval(id)\r\n//   }\r\n//   // subscriber.next('Hello world')                   // Runs II //\r\n//   // subscriber.error('Error!')            // After Error rest of the code do not run \r\n//   // subscriber.next('test')\r\n//   // subscriber.complete()                 // After Complete rest of the code do not run       \r\n//   // subscriber.next('next')\r\n// })\r\n\r\n// // console.log('before')                              // Runs I //\r\n\r\n// const subscription = observable.subscribe({\r\n//   next: (value) => {\r\n//     console.log(`Received ${value}`)\r\n//   },\r\n//   complete: () => {\r\n//     console.log(\"Completed\")\r\n//   },\r\n//   error: (err) => {\r\n//     console.log(err)\r\n//   }\r\n// })\r\n\r\n// setTimeout(() => {\r\n//   subscription.unsubscribe()\r\n// }, 4000)\r\n\r\n// // console.log('after')                               // Runs III //"},"lineCount":null}},"error":null,"hash":"0486a0ce08c96b7b36b783f9295d71c8","cacheData":{"env":{}}}